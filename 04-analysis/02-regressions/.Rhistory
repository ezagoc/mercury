file_coefs <- paste0(type, file_code)
coefs <- c('stage5_6', 'stage3_4', 'stage1_2') |>
map_dfr(~proc_coefs(.x, file_coefs))
ses <- c('stage5_6', 'stage3_4', 'stage1_2') |>
map_dfr(~proc_ses(.x, file_coefs))
final <- coefs |> left_join(ses, by = c('stage', 'var'))
if (type == 'log_'){
addon <- 'log '
} else if(type == 'arc_'){
addon <- 'arcsinh '
}else {
addon <- ''
}
final <- final |>
mutate(Variable = case_when(var == 'ver' ~ paste0(addon, 'Verifiable Posts + Shares'),
var == 'non_ver' ~ paste0(addon,
'Non Verifiable Posts + Shares'),
var == 'true' ~ paste0(addon, 'True Posts + Shares'),
var == 'fake' ~ paste0(addon, 'Fake Posts + Shares'),
var == 'n_posts' ~ paste0(addon, 'Number of Posts + Shares (English)')),
Stage = case_when(stage == 'stage1_2' ~ 'Weeks 1-4',
stage == 'stage3_4' ~ 'Weeks 5-8',
stage == 'stage5_6' ~ 'Weeks 9-12'))
final$Variable <- factor(final$Variable, levels = c(paste0(addon, 'Number of Posts + Shares (English)'),
paste0(addon,
'Non Verifiable Posts + Shares'),
paste0(addon, 'Verifiable Posts + Shares'),
paste0(addon, 'True Posts + Shares'),
paste0(addon, 'Fake Posts + Shares')))
results_plot <- ggplot(data = final, aes(x = factor(Stage), y = coef)) +
geom_point(aes(shape = factor(Variable), color = factor(Variable)), size = 3,
position = position_dodge(width = 0.5)) +
geom_linerange(aes(ymin = coef - 1.96 * sd, ymax = coef + 1.96 * sd,
color = factor(Variable)),
position = position_dodge(width = 0.5), size = 1) +
scale_shape_manual(values = c(15, 16, 17, 4, 7), name = 'Outcome') +
scale_color_manual(values = rep('black', 5), name = 'Outcome') +
geom_hline(yintercept = 0, linetype = "solid", color = "black", size = .5) +  # Set custom fill colors for points # Set custom line colors for error bars
theme_bw() +
ylab("Total Treated Estimate with 95% Confidence Interval") +
xlab("Stage") +  # Change title color
#ggtitle("Dynamic Effects of the Intervention: Verifiability Analysis") +
theme(panel.grid.major = element_line(color = "gray", linetype = "dashed", size = 0.5),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))
ggsave(results_plot,
filename = paste0('../../../../results/01-regression_graphs/',
data_type, '/', type, file_code, '_RT_and_POST.pdf'),
device = cairo_pdf, width = 8.22, height = 6.59, units = 'in')
}
results_plot
# 0.0 Set up the environment, clean it and set working directory to the code path
rm(list = ls())
rstudioapi::getActiveDocumentContext
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# 1.0 Import functions and packages
library(purrr)
src_path <- c("../../../../src/utils/")
source_files <- list(
"funcs.R",
"constants_final.R",
"import_data.R"
)
map(paste0(src_path, source_files), source)
ipak(packages)
`%!in%` = Negate(`%in%`)
codes <- list(
"final_int_nbase0_rts_posts.R",
"final_int_nbase0_rts_posts_ads.R",
'final_int_both_covid.R',
'final_int_both_covid_ads.R'
)
map(paste0(codes), source)
# 0.0 Set up the environment, clean it and set working directory to the code path
rm(list = ls())
# 1.0 Import functions and packages
library(purrr)
src_path <- c("../../../../src/utils/")
source_files <- list(
"funcs.R",
"constants_final.R",
"import_data.R"
)
map(paste0(src_path, source_files), source)
ipak(packages)
`%!in%` = Negate(`%in%`)
blocks_ke <- read_parquet(paste0('../../../../data/04-analysis/KE/extensive_fixed_effects.parquet')) |>
select(follower_id, username_influencer = username, pais:block2_fe)
blocks_sa <- read_parquet(paste0('../../../../data/04-analysis/SA/extensive_fixed_effects.parquet')) |>
select(follower_id, username_influencer = username, pais:block2_fe)
blocks <- rbind(blocks_ke, blocks_sa)
# Intensive:
codes <- list(
"final_ext_nbase0_rts_posts.R",
'final_ext_both.R'
)
map(paste0(codes), source)
# 0.0 Set up the environment, clean it and set working directory to the code path
rm(list = ls())
rstudioapi::getActiveDocumentContext
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# 1.0 Import functions and packages
library(purrr)
src_path <- c("../../../../src/utils/")
source_files <- list(
"funcs.R",
"constants_final.R",
"import_data.R"
)
map(paste0(src_path, source_files), source)
ipak(packages)
`%!in%` = Negate(`%in%`)
codes <- list(
"final_ads.R",
"final_int_nbase0.R",
"final_int_nbase0_rts_posts.R",
"final_int_nbase0_rts_posts_ads.R",
"final_int_rts_posts_both.R",
"final_int_nbase0_rts_posts_both_ads.R"
)
map(paste0(codes), source)
# 2.0 Define constants
country <- 'joint'
data_type <- 'SentimentBERT'
list_stages <- list('stage1_2', 'stage3_4', 'stage5_6')
list_types <- list('log_')
ini <- '../../../../data/04-analysis/joint/'
file_code <- 'ads'
final1 <- tibble()
for (stage in list_stages){
# 3.0 Import data and manipulate
df <- get_analysis_sent_bert_final_winsor(stage = stage, batches = 'b1b2',
initial_path = '../../../../')
df <- df |> filter(n_posts_base>0)
df <- df |> mutate(strat_block1 = paste0(strat_block1, batch_id, pais),
strat_block2 = paste0(strat_block2, batch_id, pais))
df_int <- tibble()
for (type in list_types){
aux <- paste0(type, aux_s_b)
# Get the Robust S.E.s
se <- c()
coef <- c()
count2 <- 1
for (x in aux) {
fmla1 <- as.formula(paste0(x, "~ ads_treatment + ", x, "_base  | strat_block1"))
nam1 <- paste("lm_", count2, "_se", sep = "")
assign(nam1, feols(fmla1, vcov = 'HC1', data = df))
se <- c(se, get(nam1, envir = globalenv())$se['ads_treatment'])
coef <- c(coef, get(nam1, envir = globalenv())$coefficients['ads_treatment'])
count2 <- count2 + 1
}
df_coef <- tibble(coef = coef, sd = se, var = aux_s_b) |>
mutate(stage = stage, type = type)
df_int <- rbind(df_int, df_coef)
}
final1 <- rbind(final1, df_int)
print(stage)
}
for (type in list_types){
if (type == 'log_'){
addon <- 'log '
final <- final1 |> filter(type == 'log_')
} else if(type == 'arc_'){
addon <- 'arcsinh '
final <- final1 |> filter(type == 'arc_')
}else {
addon <- ''
final <- final1 |> filter(type == '')
}
final <- final |>
mutate(Variable = case_when(var == 'pos_b_rt_covid' ~ paste0(addon, 'Positive COVID Shares'),
var == "neutral_b_rt_covid" ~ paste0(addon,
'Neutral COVID Shares'),
var == "neg_b_rt_covid" ~ paste0(addon,
'Negative COVID Shares'),
var == "n_posts_rt_covid" ~ paste0(addon,
'Number of COVID Shares'),
var == "pos_b_rt_vax" ~ paste0(addon, 'Positive COVID Vaccine Shares'),
var == "neutral_b_rt_vax" ~ paste0(addon,
'Neutral COVID Vaccine Shares'),
var == "neg_b_rt_vax" ~ paste0(addon,
'Negative COVID Vaccine Shares'),
var == "n_posts_rt_vax" ~ paste0(addon,
'Number of COVID Vaccine Shares'),
var == 'pos_b_no_rt_covid' ~ paste0(addon, 'Positive COVID Posts'),
var == "neutral_b_no_rt_covid" ~ paste0(addon,
'Neutral COVID Posts'),
var == "neg_b_no_rt_covid" ~ paste0(addon,
'Negative COVID Posts'),
var == "n_posts_no_rt_covid" ~ paste0(addon,
'Number of COVID Posts'),
var == "pos_b_no_rt_vax" ~ paste0(addon, 'Positive COVID Vaccine Posts'),
var == "neutral_b_no_rt_vax" ~ paste0(addon,
'Neutral COVID Vaccine Posts'),
var == "neg_b_no_rt_vax" ~ paste0(addon,
'Negative COVID Vaccine Posts'),
var == "n_posts_no_rt_vax" ~ paste0(addon,
'Number of COVID Vaccine Posts')),
Stage = case_when(stage == 'stage1_2' ~ 'Weeks 1-4',
stage == 'stage3_4' ~ 'Weeks 5-8',
stage == 'stage5_6' ~ 'Weeks 9-12'),
RT = ifelse(grepl('Shares', Variable, fixed = T) == T, 1, 0))
final_rt <- final |> filter(RT == 1)
final_rt$Variable <- factor(final_rt$Variable,
levels = c(paste0(addon, 'Number of COVID Shares'),
paste0(addon, 'Number of COVID Vaccine Shares'),
paste0(addon, 'Positive COVID Shares'),
paste0(addon, 'Positive COVID Vaccine Shares'),
paste0(addon, 'Neutral COVID Shares'),
paste0(addon, 'Neutral COVID Vaccine Shares'),
paste0(addon, 'Negative COVID Shares'),
paste0(addon, 'Negative COVID Vaccine Shares')))
results_plot <- ggplot(data = final_rt, aes(x = factor(Stage), y = coef)) +
geom_point(aes(shape = factor(Variable), color = factor(Variable)), size = 3,
position = position_dodge(width = 0.5)) +
geom_linerange(aes(ymin = coef - 1.96 * sd, ymax = coef + 1.96 * sd,
color = factor(Variable)),
position = position_dodge(width = 0.5), size = 1) +
scale_shape_manual(values = c(15, 16, 17, 4, 7, 1, 3, 11), name = 'Outcome') +
scale_color_manual(values = rep('black', 8), name = 'Outcome') +
geom_hline(yintercept = 0, linetype = "solid", color = "black", size = .5) +  # Set custom fill colors for points # Set custom line colors for error bars
theme_bw() +
ylab("Treated Estimate with 95% Confidence Interval") +
xlab("Stage") +  # Change title color
#ggtitle("Dynamic Effects of the Intervention: Verifiability Analysis") +
theme(panel.grid.major = element_line(color = "gray", linetype = "dashed", size = 0.5),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))
ggsave(results_plot,
filename = paste0('../../../../results/01-regression_graphs/',
data_type, '/', type, file_code, '_rt.pdf'),
device = cairo_pdf, width = 8.22, height = 6.59, units = 'in')
final_rt <- final |> filter(RT == 0)
final_rt$Variable <- factor(final_rt$Variable,
levels = c(paste0(addon, 'Number of COVID Posts'),
paste0(addon, 'Number of COVID Vaccine Posts'),
paste0(addon, 'Positive COVID Posts'),
paste0(addon, 'Positive COVID Vaccine Posts'),
paste0(addon, 'Neutral COVID Posts'),
paste0(addon, 'Neutral COVID Vaccine Posts'),
paste0(addon, 'Negative COVID Posts'),
paste0(addon, 'Negative COVID Vaccine Posts')))
results_plot <- ggplot(data = final_rt, aes(x = factor(Stage), y = coef)) +
geom_point(aes(shape = factor(Variable), color = factor(Variable)), size = 2.5,
position = position_dodge(width = 0.5)) +
geom_linerange(aes(ymin = coef - 1.96 * sd, ymax = coef + 1.96 * sd,
color = factor(Variable)),
position = position_dodge(width = 0.5), size = 1) +
scale_shape_manual(values = c(15, 16, 17, 4, 7, 1, 3, 11), name = 'Outcome') +
scale_color_manual(values = rep('black', 8), name = 'Outcome') +
geom_hline(yintercept = 0, linetype = "solid", color = "black", size = .5) +  # Set custom fill colors for points # Set custom line colors for error bars
theme_bw() +
ylab("Treated Estimate with 95% Confidence Interval") +
xlab("Stage") +  # Change title color
#ggtitle("Dynamic Effects of the Intervention: Verifiability Analysis") +
theme(panel.grid.major = element_line(color = "gray", linetype = "dashed", size = 0.5),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))
ggsave(results_plot,
filename = paste0('../../../../results/01-regression_graphs/',
data_type, '/', type, file_code, '_post.pdf'),
device = cairo_pdf, width = 8.22, height = 6.59, units = 'in')
}
results_plot
# 0.0 Set up the environment, clean it and set working directory to the code path
rm(list = ls())
rstudioapi::getActiveDocumentContext
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# 1.0 Import functions and packages
library(purrr)
src_path <- c("../../../../src/utils/")
source_files <- list(
"funcs.R",
"constants_final.R",
"import_data.R"
)
map(paste0(src_path, source_files), source)
ipak(packages)
`%!in%` = Negate(`%in%`)
codes <- list(
"final_ads.R",
"final_int_nbase0.R",
"final_int_nbase0_rts_posts.R",
"final_int_nbase0_rts_posts_ads.R",
"final_int_rts_posts_both.R",
"final_int_nbase0_rts_posts_both_ads.R"
)
map(paste0(codes), source)
# 0.0 Set up the environment, clean it and set working directory to the code path
rm(list = ls())
# 1.0 Import functions and packages
library(purrr)
src_path <- c("../../../../src/utils/")
source_files <- list(
"funcs.R",
"constants_final.R",
"import_data.R"
)
map(paste0(src_path, source_files), source)
ipak(packages)
`%!in%` = Negate(`%in%`)
blocks_ke <- read_parquet(paste0('../../../../data/04-analysis/KE/extensive_fixed_effects.parquet')) |>
select(follower_id, username_influencer = username, pais:block2_fe)
blocks_sa <- read_parquet(paste0('../../../../data/04-analysis/SA/extensive_fixed_effects.parquet')) |>
select(follower_id, username_influencer = username, pais:block2_fe)
blocks <- rbind(blocks_ke, blocks_sa)
# Intensive:
codes <- list(
"final_ext_nbase0.R",
"final_ext_nbase0_rts_posts.R",
'final_ext_rts_posts_both.R'
)
map(paste0(codes), source)
# 0.0 Set up the environment, clean it and set working directory to the code path
rm(list = ls())
rstudioapi::getActiveDocumentContext
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# 1.0 Import functions and packages
library(purrr)
src_path <- c("../../../../src/utils/")
source_files <- list(
"funcs.R",
"constants_final.R",
"import_data.R"
)
map(paste0(src_path, source_files), source)
ipak(packages)
`%!in%` = Negate(`%in%`)
# 0.0 Set up the environment, clean it and set working directory to the code path
rm(list = ls())
rstudioapi::getActiveDocumentContext
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# 0.0 Set up the environment, clean it and set working directory to the code path
rm(list = ls())
rstudioapi::getActiveDocumentContext
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# 1.0 Import functions and packages
library(purrr)
src_path <- c("../../../../src/utils/")
source_files <- list(
"funcs.R",
"constants_final.R",
"import_data.R"
)
map(paste0(src_path, source_files), source)
# 0.0 Set up the environment, clean it and set working directory to the code path
rm(list = ls())
rstudioapi::getActiveDocumentContext
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# 1.0 Import functions and packages
library(purrr)
src_path <- c("../../../src/utils/")
source_files <- list(
"funcs.R",
"constants_final.R",
"import_data.R"
)
map(paste0(src_path, source_files), source)
ipak(packages)
`%!in%` = Negate(`%in%`)
df <- get_analysis_ver_final_winsor(stage = stage, batches = 'b1b2',
initial_path = '../../../')
df <- get_analysis_ver_final_winsor(stage = 'stage1_2', batches = 'b1b2',
initial_path = '../../../')
# General Configurations ----------------------------------------------------
rm(list = ls()) # Clean out elements in R environment
setwd("../../data/02-randomize/")
setwd("../../../data/02-randomize/")
source("../../code/02-randomize/funcs.R")
rm(list = ls()) # Clean out elements in R environment
setwd("../../data/02-randomize/")
source("../../code/02-randomize/funcs.R")
library(tidyverse)
country <- 'SA'
load(paste0(country ,"/03-assignment/input/twitter_followers_batch2.Rda"))
df <- arrow::read_parquet(paste0('../../../social-media-influencers-africa/data/02-randomize/'
,country,'/04-stratification/integrate/followers_randomized_strong_weak_abs.parquet'))
df1 <- arrow::read_parquet(paste0(country,
'/04-stratification/integrate/followers_randomized.parquet'))
df_treat <- df |> filter(treatment == 1) |> select(follower_id, treatment)
df_treat1 <- df1 |> filter(treatment == 1) |> select(follower_id, treatment)
twitter <- twitter |> left_join(df_treat) |>
left_join(df_treat1 |> rename(treatment1 = treatment))
twitter_ov <- twitter |> filter(is.na(treatment) == T & is.na(treatment1) == T)
strong <- twitter_ov |> filter(n_strong > 0 | n_weak > 0)
absent <- twitter_ov |> filter(n_strong == 0 & n_weak == 0)
perc_10 <- round(.01*nrow(absent), 0)
set.seed(123)
absent <- absent |> sample_n(size = perc_10)
weak_strong_absent <- rbind(strong, absent) |> select(-treatment)
rm(list = ls()) # Clean out elements in R environment
setwd("../../data/02-randomize/")
source("../../code/02-randomize/funcs.R")
library(tidyverse)
country <- 'KE'
load(paste0(country ,"/03-assignment/input/twitter_followers_batch2.Rda"))
df <- arrow::read_parquet(paste0('../../../social-media-influencers-africa/data/02-randomize/'
,country,'/04-stratification/integrate/followers_randomized_strong_weak_abs.parquet'))
df1 <- arrow::read_parquet(paste0(country,
'/04-stratification/integrate/followers_randomized.parquet'))
df_treat <- df |> filter(treatment == 1) |> select(follower_id, treatment)
df_treat1 <- df1 |> filter(treatment == 1) |> select(follower_id, treatment)
twitter <- twitter |> left_join(df_treat) |>
left_join(df_treat1 |> rename(treatment1 = treatment))
twitter_ov <- twitter |> filter(is.na(treatment) == T & is.na(treatment1) == T)
strong <- twitter_ov |> filter(n_strong > 0 | n_weak > 0)
absent <- twitter_ov |> filter(n_strong == 0 & n_weak == 0)
perc_10 <- round(.01*nrow(absent), 0)
set.seed(123)
absent <- absent |> sample_n(size = perc_10)
weak_strong_absent <- rbind(strong, absent) |> select(-treatment)
# 0.0 Set up the environment, clean it and set working directory to the code path
rm(list = ls())
rstudioapi::getActiveDocumentContext
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# 1.0 Import functions and packages
library(purrr)
src_path <- c("../../../src/utils/")
source_files <- list(
"funcs.R",
"constants_final.R",
"import_data.R"
)
map(paste0(src_path, source_files), source)
ipak(packages)
`%!in%` = Negate(`%in%`)
df <- get_analysis_ver_final_winsor(stage = 'stage1_2', batches = 'b1b2',
initial_path = '../../../')
df <- df |> filter(n_posts_base>0)
View(df)
df_strong |> df |> filter(c_t_strong_total > 1)
df_strong <- df |> filter(c_t_strong_total > 1)
View(df_strong)
df_strong <- df |> filter(c_t_strong_total > 0)
View(df_strong)
df_weak <- df |> filter(c_t_weak_total > 0)
df_absent <- df |> filter(c_t_strong == 0 & c_t_weak_total == 0)
df_absent <- df |> filter(c_t_strong_total == 0 & c_t_weak_total == 0)
12733 + 28238 + 136751
df_weak <- df |> filter(c_t_weak_total > 0 & c_t_strong_total == 0)
12733 + 28238 + 129576
ggplot(data = df, aes(x = c_t_strong_total)) +
geom_histogram(binwidth = 2, fill = "blue", color = "black") +
theme_minimal()
ggplot(data = df, aes(x = c_t_strong_total)) +
geom_histogram(binwidth = .5, fill = "blue", color = "black") +
theme_minimal()
ggplot(data = df, aes(x = c_t_strong_total)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
theme_minimal()
ggplot(data = df, aes(x = c_t_strong_total)) +
geom_histogram(binwidth = .6, fill = "blue", color = "black") +
theme_minimal()
ggplot(data = df, aes(x = c_t_strong_total)) +
geom_histogram(aes(y = ..density..), binwidth = 2, fill = "blue", color = "black") +
geom_density(alpha = 0.2, fill = "red") +
theme_minimal() +
labs(title = "Highway Miles Per Gallon with Density Curve",
x = "Highway MPG",
y = "Density") +
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
)
ggplot(data = df, aes(x = c_t_strong_total)) +
geom_histogram(aes(y = ..density..), binwidth = .5, fill = "blue", color = "black") +
geom_density(alpha = 0.2, fill = "red") +
theme_minimal() +
labs(title = "Highway Miles Per Gallon with Density Curve",
x = "Highway MPG",
y = "Density") +
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
)
ggplot(data = df, aes(x = c_t_strong_total)) +
geom_histogram(aes(y = ..density..), binwidth = .6, fill = "blue", color = "black") +
theme_minimal()
ggplot(data = df, aes(x = c_t_strong_total)) +
geom_histogram(aes(y = ..density..), binwidth = .6, fill = "blue", color = "black") +
theme_minimal() +
labs(title = "Distribution Very Strong",
x = "Number of Influencers Followed (Very Strong)",
y = "Density")
ggplot(data = df, aes(x = c_t_strong_total)) +
geom_histogram(aes(y = ..density..), binwidth = 1, fill = "blue", color = "black") +
theme_minimal() +
labs(title = "Distribution Very Strong",
x = "Number of Influencers Followed (Very Strong)",
y = "Density")
ggplot(data = df, aes(x = c_t_weak_total)) +
geom_histogram(aes(y = ..density..), binwidth = 1, fill = "blue", color = "black") +
theme_minimal() +
labs(title = "Distribution Strong",
x = "Number of Influencers Followed (Strong)",
y = "Density")
ggplot(data = df, aes(x = c_t_neither_total)) +
geom_histogram(aes(y = ..density..), binwidth = 1, fill = "blue", color = "black") +
theme_minimal() +
labs(title = "Distribution Weak",
x = "Number of Influencers Followed (Weak)",
y = "Density")
# 2.0 Define constants (DO NOT CHANGE)
country <- 'joint'
list_stages <- list('stage1_2', 'stage3_4', 'stage5_6')
list_types <- list( 'log_')
ini <- '../../../../data/04-analysis/joint/'
# 2.1 Change from code to code
data_type <- 'InteractionsVer'
file_code <- 'ext_reactions'
