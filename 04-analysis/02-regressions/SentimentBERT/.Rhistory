library("purrr")
src_path <- c("../../src/utils/")
source_files <- list(
"funcs.R",
"constants_balance.R"
)
map(paste0(src_path, source_files), source)
library(academictwitteR)
library(tidyverse)
bearer = 'AAAAAAAAAAAAAAAAAAAAAFsqeAEAAAAAxJhMuhDNgVBlTWIMrgjo4HA8w5U%3DcZXthpBX0nHKyXp6tFdWi7ODKLlAX9dOuTQcN7o9P0dkfQp5a2'
tweets2 <-
get_all_tweets(query = '(feminazi OR radfem OR #feminazi OR #radfem) (lang:es)',
start_tweets = '2020-03-05T00:00:00Z',
end_tweets = '2020-03-15T00:00:00Z',
bearer_token = bearer,
bind_tweets = TRUE,
data_path = "../../data/back_up/hate_speech/2020/",
n= 20000
)
tweets2 <-
get_all_tweets(query = '(feminazi OR radfem OR #feminazi OR #radfem) (lang:es)',
start_tweets = '2020-03-05T00:00:00Z',
end_tweets = '2020-03-15T00:00:00Z',
bearer_token = bearer,
bind_tweets = TRUE,
data_path = "../../data/back_up/hate_speech/2020/",
n= 20000
)
rm(list = ls()) # Clean out elements in R environment
setwd("../../data/02-randomize/")
install.packages('sf', type = 'source')
library(sf)
library(tidyverse)
shape <- st_read(system.file("shape/nc.shp", package="sf")) # included with sf package
View(shape)
# 3 semi random NC cities
cities <- data.frame(name = c("Raleigh", "Greensboro", "Wilmington"),
x = c(-78.633333, -79.819444, -77.912222),
y = c(35.766667, 36.08, 34.223333)) %>%
st_as_sf(coords = c("x", "y"), crs = 4326) %>%
st_transform(st_crs(shape)) # align coordinate systems
View(cities)
# here be the action!
cities_with_counties <- st_join(cities,
shape,
left = F) %>% # not left = inner join
select(name, county = NAME)
View(cities_with_counties)
df <- arrow::read_parquet(paste0('../../data/01-preprocess/geolocated/', batch,
'/final/users_muns.parquet'))
batch <- 'batch1'
df <- arrow::read_parquet(paste0('../../data/01-preprocess/geolocated/', batch,
'/final/users_muns.parquet'))
sxsw <- read_parquet('../../data/01-preprocess/geolocated/sxsw/integrate/user_coordinates_filtered.parquet') |>
select(username, name, location, created_at, id, description,
loc1:exclude_states)
library(sf)
library(tidyverse)
library(arrow)
library(foreign)
# 0.2 Importing the Data
# Municipality Data:
muns_pol2 <- read_sf('../../data/01-preprocess/shapefiles1/00mun.shp')
rm(list = ls()) # Clean out elements in R environment
setwd("../../data/02-randomize/")
library(sp)
library(sf)
library(tidyverse)
library(rgdal)
library(dismo)
library(gstat)
library(rgeos)
# Loading the data frames:
########## Municipality data:
muns_pol2 <- read_sf('../../../data/01-preprocess/shapefiles1/00mun.shp')
library(stars)
library(sp)
library(sf)
library(tidyverse)
library(rgdal)
library(dismo)
library(gstat)
library(rgeos)
library(arrow)
library(sp)
library(sf)
library(tidyverse)
library(rgdal)
library(dismo)
library(gstat)
library(rgeos)
library(arrow)
library(stars)
library(automap)
########## Municipality data:
muns_pol2 <- read_sf('../../../data/01-preprocess/shapefiles1/00mun.shp')
library(academictwitteR)
bearer <- "AAAAAAAAAAAAAAAAAAAAAEEXcQEAAAAANiZf0Y2n%2B2nT%2FCfdCz0kqkpep%2Fs%3Dy0yeu7cSyURT6fVUr1MbobyC57R6aLbHUkwzWRCMJERJhwVf1u"
df1 <- hydrate_tweets('1609488636738957312', bearer_token = bearer)
df2 <- hydrate_tweets('1608908347457277952', bearer_token = bearer)
View(df2)
View(df1)
asinh(0)
# 0.0 Set up the environment, clean it and set working directory to the code path
rm(list = ls())
rstudioapi::getActiveDocumentContext
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# 1.0 Import functions and packages
library(purrr)
library(fastDummies)
src_path <- c("../../../../src/utils/")
source_files <- list(
"funcs.R",
"constants_final.R",
"import_data.R"
)
map(paste0(src_path, source_files), source)
ipak(packages)
`%!in%` = Negate(`%in%`)
# 2.0 Define constants
country <- 'joint'
data_type <- 'URLs'
list_stages <- list('stage1_2', 'stage3_4', 'stage5_6')
list_types <- list('log_')
file_code <- 'linear_8'
ini <- '../../../../data/04-analysis/joint/'
for (type in list_types){
file_coefs <- paste0(type, file_code)
coefs <- c('stage5_6', 'stage3_4', 'stage1_2') |>
map_dfr(~proc_coefs(.x, file_coefs))
ses <- c('stage5_6', 'stage3_4', 'stage1_2') |>
map_dfr(~proc_ses(.x, file_coefs))
final <- coefs |> left_join(ses, by = c('stage', 'var'))
if (type == 'log_'){
addon <- 'log '
} else if(type == 'arc_'){
addon <- 'arcsinh '
}else {
addon <- ''
}
final <- final |>
mutate(Variable = case_when(var == 'tot_urls' ~ paste0(addon, 'Total URLs'),
var == 'tot_info' ~ paste0(addon, 'Total Info.'),
var == 'tot_news' ~ paste0(addon, 'Total News'),
var == 'fc' ~ paste0(addon, 'Fact-Checks'),
var == 'rel' ~ paste0(addon, 'Reliable'),
var == 'nrel' ~ paste0(addon, 'Non-Reliable'),
var == 'other' ~ paste0(addon, 'Other Not Info.')),
Stage = case_when(stage == 'stage1_2' ~ 'Weeks 1-4',
stage == 'stage3_4' ~ 'Weeks 5-8',
stage == 'stage5_6' ~ 'Weeks 9-12'))
writexl::write_xlsx(final, paste0(ini, 'EstimatesFinal/',type, data_type, '_intensive.xlsx'))
final$Variable <- factor(final$Variable, levels = c(paste0(addon, 'Total URLs'),
paste0(addon, 'Total Info.'),
paste0(addon, 'Fact-Checks'),
paste0(addon, 'Total News'),
paste0(addon, 'Reliable'),
paste0(addon, 'Non-Reliable'),
paste0(addon, 'Other Not Info.')))
results_plot <- ggplot(data = final, aes(x = factor(Stage), y = coef)) +
geom_point(aes(shape = factor(Variable), color = factor(Variable)), size = 3,
position = position_dodge(width = 0.5)) +
geom_linerange(aes(ymin = coef - 1.96 * sd, ymax = coef + 1.96 * sd,
color = factor(Variable)),
position = position_dodge(width = 0.5), size = 1) +
scale_shape_manual(values = c(15, 16, 17, 4, 7, 1, 10), name = 'Outcome') +
scale_color_manual(values = rep('black', 7), name = 'Outcome') +
geom_hline(yintercept = 0, linetype = "solid", color = "black", size = .5) +  # Set custom fill colors for points # Set custom line colors for error bars
theme_bw() +
ylab("Total Treated Estimate with 95% Confidence Interval") +
xlab("Stage") +  # Change title color
#ggtitle("Dynamic Effects of the Intervention: Verifiability Analysis") +
theme(panel.grid.major = element_line(color = "gray", linetype = "dashed", size = 0.5),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))
if (addon == 'log '){
results_plot <- results_plot + ylim(-.1, .1)
}else{
results_plot <- results_plot
}
ggsave(results_plot,
filename = paste0('../../../../results/01-regression_graphs/',
data_type, '/', type, file_code, '.pdf'),
device = cairo_pdf, width = 8.22, height = 6.59, units = 'in')
}
results_plot
# 0.0 Set up the environment, clean it and set working directory to the code path
rm(list = ls())
rstudioapi::getActiveDocumentContext
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# 1.0 Import functions and packages
library(purrr)
library(fastDummies)
src_path <- c("../../../../src/utils/")
source_files <- list(
"funcs.R",
"constants_final.R",
"import_data.R"
)
map(paste0(src_path, source_files), source)
ipak(packages)
`%!in%` = Negate(`%in%`)
# 2.0 Define constants
country <- 'joint'
data_type <- 'SentimentBERT'
list_stages <- list('stage1_2', 'stage3_4', 'stage5_6')
list_types <- list( 'log_')
file_code <- 'next_nbase0_rts_posts'
ini <- '../../../../data/04-analysis/joint/'
for (type in list_types){
file_coefs <- paste0(type, file_code)
coefs <- c('stage5_6', 'stage3_4', 'stage1_2') |>
map_dfr(~proc_coefs(.x, file_coefs))
ses <- c('stage5_6', 'stage3_4', 'stage1_2') |>
map_dfr(~proc_ses(.x, file_coefs))
final <- coefs |> left_join(ses, by = c('stage', 'var'))
if (type == 'log_'){
addon <- 'log '
} else if(type == 'arc_'){
addon <- 'arcsinh '
}else {
addon <- ''
}
final <- final |>
mutate(Variable = case_when(var == "pos_rt_c" ~ paste0(addon, 'Positive COVID Vaccine Posts + Shares'),
var == "neu_rt_c" ~ paste0(addon,
'Neutral COVID Vaccine Posts + Shares'),
var == "neg_rt_c" ~ paste0(addon,
'Negative COVID Vaccine Posts + Shares'),
var == "n_posts_rt_c" ~ paste0(addon,
'Number of COVID Vaccine Posts + Shares')),
Stage = case_when(stage == 'stage1_2' ~ 'Weeks 1-4',
stage == 'stage3_4' ~ 'Weeks 5-8',
stage == 'stage5_6' ~ 'Weeks 9-12'))
final$Variable <- factor(final$Variable,
levels = c(paste0(addon, 'Number of COVID Vaccine Posts + Shares'),
paste0(addon, 'Positive COVID Vaccine Posts + Shares'),
paste0(addon, 'Neutral COVID Vaccine Posts + Shares'),
paste0(addon, 'Negative COVID Vaccine Posts + Shares')))
results_plot <- ggplot(data = final, aes(x = factor(Stage), y = coef)) +
geom_point(aes(shape = factor(Variable), color = factor(Variable)), size = 3,
position = position_dodge(width = 0.5)) +
geom_linerange(aes(ymin = coef - 1.96 * sd, ymax = coef + 1.96 * sd,
color = factor(Variable)),
position = position_dodge(width = 0.5), size = 1) +
scale_shape_manual(values = c(15, 16, 17, 4, 7, 1, 3, 10), name = 'Outcome') +
scale_color_manual(values = rep('black', 8), name = 'Outcome') +
geom_hline(yintercept = 0, linetype = "solid", color = "black", size = .5) +  # Set custom fill colors for points # Set custom line colors for error bars
theme_bw() +
ylab("Total Treated Estimate with 95% Confidence Interval") +
xlab("Stage") +  # Change title color
#ggtitle("Dynamic Effects of the Intervention: Verifiability Analysis") +
theme(panel.grid.major = element_line(color = "gray", linetype = "dashed", size = 0.5),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))
ggsave(results_plot,
filename = paste0('../../../../results/01-regression_graphs/',
data_type, '/', type, file_code, '.pdf'),
device = cairo_pdf, width = 8.22, height = 6.59, units = 'in')
}
results_plot
for (type in list_types){
file_coefs <- paste0(type, file_code)
coefs <- c('stage5_6', 'stage3_4', 'stage1_2') |>
map_dfr(~proc_coefs(.x, file_coefs))
ses <- c('stage5_6', 'stage3_4', 'stage1_2') |>
map_dfr(~proc_ses(.x, file_coefs))
final <- coefs |> left_join(ses, by = c('stage', 'var'))
if (type == 'log_'){
addon <- 'log '
} else if(type == 'arc_'){
addon <- 'arcsinh '
}else {
addon <- ''
}
final <- final |>
mutate(Variable = case_when(var == "pos_rt_c" ~ paste0(addon, 'Positive COVID Vaccine Posts + Shares'),
var == "neu_rt_c" ~ paste0(addon,
'Neutral COVID Vaccine Posts + Shares'),
var == "neg_rt_c" ~ paste0(addon,
'Negative COVID Vaccine Posts + Shares'),
var == "n_posts_rt_c" ~ paste0(addon,
'Number of COVID Vaccine Posts + Shares')),
Stage = case_when(stage == 'stage1_2' ~ 'Weeks 1-4',
stage == 'stage3_4' ~ 'Weeks 5-8',
stage == 'stage5_6' ~ 'Weeks 9-12'))
final$Variable <- factor(final$Variable,
levels = c(paste0(addon, 'Number of COVID Vaccine Posts + Shares'),
paste0(addon, 'Positive COVID Vaccine Posts + Shares'),
paste0(addon, 'Neutral COVID Vaccine Posts + Shares'),
paste0(addon, 'Negative COVID Vaccine Posts + Shares')))
results_plot <- ggplot(data = final, aes(x = factor(Stage), y = coef)) +
geom_point(aes(shape = factor(Variable), color = factor(Variable)), size = 3,
position = position_dodge(width = 0.5)) +
geom_linerange(aes(ymin = coef - 1.96 * sd, ymax = coef + 1.96 * sd,
color = factor(Variable)),
position = position_dodge(width = 0.5), size = 1) +
scale_shape_manual(values = c(15, 16, 17, 4, 7, 1, 3, 10), name = 'Outcome') +
scale_color_manual(values = rep('black', 8), name = 'Outcome') +
geom_hline(yintercept = 0, linetype = "solid", color = "black", size = .5) +  # Set custom fill colors for points # Set custom line colors for error bars
theme_bw() +
ylab("Total Treated Estimate with 95% Confidence Interval") +
xlab("Stage") +  # Change title color
#ggtitle("Dynamic Effects of the Intervention: Verifiability Analysis") +
theme(panel.grid.major = element_line(color = "gray", linetype = "dashed", size = 0.5),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))
if (addon == 'log '){
results_plot <- results_plot + ylim(-.05, .05)
}else{
results_plot <- results_plot
}
ggsave(results_plot,
filename = paste0('../../../../results/01-regression_graphs/',
data_type, '/', type, file_code, '.pdf'),
device = cairo_pdf, width = 8.22, height = 6.59, units = 'in')
}
results_plot
for (type in list_types){
file_coefs <- paste0(type, file_code)
coefs <- c('stage5_6', 'stage3_4', 'stage1_2') |>
map_dfr(~proc_coefs(.x, file_coefs))
ses <- c('stage5_6', 'stage3_4', 'stage1_2') |>
map_dfr(~proc_ses(.x, file_coefs))
final <- coefs |> left_join(ses, by = c('stage', 'var'))
if (type == 'log_'){
addon <- 'log '
} else if(type == 'arc_'){
addon <- 'arcsinh '
}else {
addon <- ''
}
final <- final |>
mutate(Variable = case_when(var == "pos_rt_c" ~ paste0(addon, 'Positive COVID Vaccine Posts + Shares'),
var == "neu_rt_c" ~ paste0(addon,
'Neutral COVID Vaccine Posts + Shares'),
var == "neg_rt_c" ~ paste0(addon,
'Negative COVID Vaccine Posts + Shares'),
var == "n_posts_rt_c" ~ paste0(addon,
'Number of COVID Vaccine Posts + Shares')),
Stage = case_when(stage == 'stage1_2' ~ 'Weeks 1-4',
stage == 'stage3_4' ~ 'Weeks 5-8',
stage == 'stage5_6' ~ 'Weeks 9-12'))
final$Variable <- factor(final$Variable,
levels = c(paste0(addon, 'Number of COVID Vaccine Posts + Shares'),
paste0(addon, 'Positive COVID Vaccine Posts + Shares'),
paste0(addon, 'Neutral COVID Vaccine Posts + Shares'),
paste0(addon, 'Negative COVID Vaccine Posts + Shares')))
results_plot <- ggplot(data = final, aes(x = factor(Stage), y = coef)) +
geom_point(aes(shape = factor(Variable), color = factor(Variable)), size = 3,
position = position_dodge(width = 0.5)) +
geom_linerange(aes(ymin = coef - 1.96 * sd, ymax = coef + 1.96 * sd,
color = factor(Variable)),
position = position_dodge(width = 0.5), size = 1) +
scale_shape_manual(values = c(15, 16, 17, 4, 7, 1, 3, 10), name = 'Outcome') +
scale_color_manual(values = rep('black', 8), name = 'Outcome') +
geom_hline(yintercept = 0, linetype = "solid", color = "black", size = .5) +  # Set custom fill colors for points # Set custom line colors for error bars
theme_bw() +
ylab("Total Treated Estimate with 95% Confidence Interval") +
xlab("Stage") +  # Change title color
#ggtitle("Dynamic Effects of the Intervention: Verifiability Analysis") +
theme(panel.grid.major = element_line(color = "gray", linetype = "dashed", size = 0.5),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))
if (addon == 'log '){
results_plot <- results_plot + ylim(-.025, .025)
}else{
results_plot <- results_plot
}
ggsave(results_plot,
filename = paste0('../../../../results/01-regression_graphs/',
data_type, '/', type, file_code, '.pdf'),
device = cairo_pdf, width = 8.22, height = 6.59, units = 'in')
}
results_plot
for (type in list_types){
file_coefs <- paste0(type, file_code)
coefs <- c('stage5_6', 'stage3_4', 'stage1_2') |>
map_dfr(~proc_coefs(.x, file_coefs))
ses <- c('stage5_6', 'stage3_4', 'stage1_2') |>
map_dfr(~proc_ses(.x, file_coefs))
final <- coefs |> left_join(ses, by = c('stage', 'var'))
if (type == 'log_'){
addon <- 'log '
} else if(type == 'arc_'){
addon <- 'arcsinh '
}else {
addon <- ''
}
final <- final |>
mutate(Variable = case_when(var == "pos_rt_c" ~ paste0(addon, 'Positive COVID Vaccine Posts + Shares'),
var == "neu_rt_c" ~ paste0(addon,
'Neutral COVID Vaccine Posts + Shares'),
var == "neg_rt_c" ~ paste0(addon,
'Negative COVID Vaccine Posts + Shares'),
var == "n_posts_rt_c" ~ paste0(addon,
'Number of COVID Vaccine Posts + Shares')),
Stage = case_when(stage == 'stage1_2' ~ 'Weeks 1-4',
stage == 'stage3_4' ~ 'Weeks 5-8',
stage == 'stage5_6' ~ 'Weeks 9-12'))
final$Variable <- factor(final$Variable,
levels = c(paste0(addon, 'Number of COVID Vaccine Posts + Shares'),
paste0(addon, 'Positive COVID Vaccine Posts + Shares'),
paste0(addon, 'Neutral COVID Vaccine Posts + Shares'),
paste0(addon, 'Negative COVID Vaccine Posts + Shares')))
results_plot <- ggplot(data = final, aes(x = factor(Stage), y = coef)) +
geom_point(aes(shape = factor(Variable), color = factor(Variable)), size = 3,
position = position_dodge(width = 0.5)) +
geom_linerange(aes(ymin = coef - 1.96 * sd, ymax = coef + 1.96 * sd,
color = factor(Variable)),
position = position_dodge(width = 0.5), size = 1) +
scale_shape_manual(values = c(15, 16, 17, 4, 7, 1, 3, 10), name = 'Outcome') +
scale_color_manual(values = rep('black', 8), name = 'Outcome') +
geom_hline(yintercept = 0, linetype = "solid", color = "black", size = .5) +  # Set custom fill colors for points # Set custom line colors for error bars
theme_bw() +
ylab("Total Treated Estimate with 95% Confidence Interval") +
xlab("Stage") +  # Change title color
#ggtitle("Dynamic Effects of the Intervention: Verifiability Analysis") +
theme(panel.grid.major = element_line(color = "gray", linetype = "dashed", size = 0.5),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))
if (addon == 'log '){
results_plot <- results_plot + ylim(-.015, .015)
}else{
results_plot <- results_plot
}
ggsave(results_plot,
filename = paste0('../../../../results/01-regression_graphs/',
data_type, '/', type, file_code, '.pdf'),
device = cairo_pdf, width = 8.22, height = 6.59, units = 'in')
}
results_plot
# 0.0 Set up the environment, clean it and set working directory to the code path
rm(list = ls())
rstudioapi::getActiveDocumentContext
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# 1.0 Import functions and packages
library(purrr)
library(fastDummies)
src_path <- c("../../../../src/utils/")
source_files <- list(
"funcs.R",
"constants_final.R",
"import_data.R"
)
map(paste0(src_path, source_files), source)
ipak(packages)
`%!in%` = Negate(`%in%`)
# 2.0 Define constants
country <- 'joint'
data_type <- 'SentimentBERT'
list_stages <- list('stage1_2', 'stage3_4', 'stage5_6')
list_types <- list( 'log_')
file_code <- 'linear_8'
ini <- '../../../../data/04-analysis/joint/'
for (type in list_types){
file_coefs <- paste0(type, file_code)
coefs <- c('stage5_6', 'stage3_4', 'stage1_2') |>
map_dfr(~proc_coefs(.x, file_coefs))
ses <- c('stage5_6', 'stage3_4', 'stage1_2') |>
map_dfr(~proc_ses(.x, file_coefs))
final <- coefs |> left_join(ses, by = c('stage', 'var'))
if (type == 'log_'){
addon <- 'log '
} else if(type == 'arc_'){
addon <- 'arcsinh '
}else {
addon <- ''
}
final <- final |>
mutate(Variable = case_when(var == "pos_rt_c" ~ paste0(addon, 'Positive COVID Vaccine Posts + Shares'),
var == "neu_rt_c" ~ paste0(addon,
'Neutral COVID Vaccine Posts + Shares'),
var == "neg_rt_c" ~ paste0(addon,
'Negative COVID Vaccine Posts + Shares'),
var == "n_posts_rt_c" ~ paste0(addon,
'Number of COVID Vaccine Posts + Shares')),
Stage = case_when(stage == 'stage1_2' ~ 'Weeks 1-4',
stage == 'stage3_4' ~ 'Weeks 5-8',
stage == 'stage5_6' ~ 'Weeks 9-12'))
final$Variable <- factor(final$Variable,
levels = c(paste0(addon, 'Number of COVID Vaccine Posts + Shares'),
paste0(addon, 'Positive COVID Vaccine Posts + Shares'),
paste0(addon, 'Neutral COVID Vaccine Posts + Shares'),
paste0(addon, 'Negative COVID Vaccine Posts + Shares')))
results_plot <- ggplot(data = final, aes(x = factor(Stage), y = coef)) +
geom_point(aes(shape = factor(Variable), color = factor(Variable)), size = 3,
position = position_dodge(width = 0.5)) +
geom_linerange(aes(ymin = coef - 1.96 * sd, ymax = coef + 1.96 * sd,
color = factor(Variable)),
position = position_dodge(width = 0.5), size = 1) +
scale_shape_manual(values = c(15, 16, 17, 4, 7, 1, 3, 10), name = 'Outcome') +
scale_color_manual(values = rep('black', 8), name = 'Outcome') +
geom_hline(yintercept = 0, linetype = "solid", color = "black", size = .5) +  # Set custom fill colors for points # Set custom line colors for error bars
theme_bw() +
ylab("Total Treated Estimate with 95% Confidence Interval") +
xlab("Stage") +  # Change title color
#ggtitle("Dynamic Effects of the Intervention: Verifiability Analysis") +
theme(panel.grid.major = element_line(color = "gray", linetype = "dashed", size = 0.5),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))
if (addon == 'log '){
results_plot <- results_plot + ylim(-.015, .015)
}else{
results_plot <- results_plot
}
ggsave(results_plot,
filename = paste0('../../../../results/01-regression_graphs/',
data_type, '/', type, file_code, '.pdf'),
device = cairo_pdf, width = 8.22, height = 6.59, units = 'in')
}
results_plot
