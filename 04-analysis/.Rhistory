gradient_bandit_algorithm(stationary_bandit, alpha = 0)
gradient_bandit_algorithm <- function(bandit_function, alpha) {
k <- 5
Ht <- rep(1, k)
pit <- exp(Ht) / sum(exp(Ht))
Nt <- rep(0, k)
Rt <- numeric(1000)
# Run the bandit for 1000 steps
for (t in 1:1000) {
# Choose action based on probabilities
a <- sample(1:k, 1, prob = pit)
# Increment the count for the chosen action
Nt[a] <- Nt[a] + 1
if (identical(bandit_function, stationary_bandit)) {
reward <- bandit_function(a)
} else {
reward <- bandit_function(a, t)
}
# Update preferences
Ht[a] <- Ht[a] + alpha * (reward - mean(Rt)) * (1 - pit[a])
Ht[-a] <- Ht[-a] - alpha * (reward - mean(Rt)) * pit[-a]
# Update probabilities
pit <- exp(Ht) / sum(exp(Ht))
Rt[t] <- reward
}
R_bar <- mean(Rt)
results <- list(Ht = Ht, pit = pit, Nt = Nt, R_bar = R_bar, Rt = Rt)
return(results)
}
set.seed(4711)
gradient_bandit_algorithm(stationary_bandit, alpha = 0.1)
set.seed(4712)
gradient_bandit_algorithm(stationary_bandit, alpha = 0.1)
set.seed(4711)
gradient_bandit_algorithm(stationary_bandit, alpha = 0)
run_gradient_bandit_simulations <- function(alpha, bandit_function, n_simulations) {
mean_rewards <- numeric(n_simulations)
for (sim in 1:n_simulations) {
results <- gradient_bandit_algorithm(bandit_function, alpha)
mean_rewards[sim] <- results$R_bar
}
return(mean(mean_rewards))
}
run_ucb_simulations <- function(c_value, bandit_function, n_simulations) {
mean_rewards <- numeric(n_simulations)
for (sim in 1:n_simulations) {
results <- ucb_algorithm(rep(0, 5), bandit_function, c_value)
mean_rewards[sim] <- results$R_bar
}
return(mean(mean_rewards))
}
set.seed(4711)
n_simulations <- 500
alpha_values_gradient_bandit <- c(0.1, 1)
c_values_ucb <- c(0.5, 2)
results_table_additional <- data.frame(
Algorithm = character(),
Bandit_Type = character(),
Parameter = character(),
Mean_Reward = numeric(),
stringsAsFactors = FALSE
)
# Run simulations for gradient bandit with stationary bandit
for (alpha_value in alpha_values_gradient_bandit) {
results_table_additional <- rbind(
results_table_additional,
data.frame(
Algorithm = "Gradient Bandit",
Bandit_Type = "Stationary",
Parameter = sprintf("Alpha = %.1f", alpha_value),
Mean_Reward = run_gradient_bandit_simulations(alpha_value, stationary_bandit, n_simulations)
)
)
}
# Run simulations for gradient bandit with non-stationary bandit
for (alpha_value in alpha_values_gradient_bandit) {
results_table_additional <- rbind(
results_table_additional,
data.frame(
Algorithm = "Gradient Bandit",
Bandit_Type = "Non-Stationary",
Parameter = sprintf("Alpha = %.1f", alpha_value),
Mean_Reward = run_gradient_bandit_simulations(alpha_value, nonstationary_bandit, n_simulations)
)
)
}
# Run simulations for UCB with stationary bandit
for (c_value in c_values_ucb) {
results_table_additional <- rbind(
results_table_additional,
data.frame(
Algorithm = "UCB",
Bandit_Type = "Stationary",
Parameter = sprintf("c = %.1f", c_value),
Mean_Reward = run_ucb_simulations(c_value, stationary_bandit, n_simulations)
)
)
}
# Run simulations for UCB with non-stationary bandit
for (c_value in c_values_ucb) {
results_table_additional <- rbind(
results_table_additional,
data.frame(
Algorithm = "UCB",
Bandit_Type = "Non-Stationary",
Parameter = sprintf("c = %.1f", c_value),
Mean_Reward = run_ucb_simulations(c_value, nonstationary_bandit, n_simulations)
)
)
}
# Summarize results
kable(results_table_additional, format = "latex", booktabs = TRUE, linesep = "")
results_table_additional
greedy_algorithm <- function(Q1, bandit_function) {
k <- length(Q1)
Qt <- Q1
Nt <- rep(0, k)
Rt <- numeric(1000)
# Run the bandit for 1000 steps
for (t in 1:1000) {
# Choose the greedy action
a <- which.max(Qt)
# Increment the count for the chosen action
Nt[a] <- Nt[a] + 1
# Get the reward for the chosen action from the bandit function
if (identical(bandit_function, stationary_bandit)) {
reward <- bandit_function(a)
} else {
reward <- bandit_function(a, t)
}
# Update the value estimate for the chosen action
Qt[a] <- Qt[a] + (reward - Qt[a]) / Nt[a]
Rt[t] <- reward
}
R_bar <- mean(Rt)
results <- list(Qt = Qt, Nt = Nt, R_bar = R_bar, Rt = Rt)
return(results)
}
# Test function
Q1 <- rep(0, 5)
set.seed(4711)
greedy_algorithm <- greedy_algorithm(Q1, stationary_bandit)
greedy_algorithm$Qt
greedy_algorithm$Nt
greedy_algorithm$R_bar
head(greedy_algorithm$Rt,10)
library(tidyverse)
library(readr)
library(haven)
# Clean environment
rm(list = ls())
###############################
### change information here ###
###############################
# set working directory to source path location
setwd("~/Dropbox/Campaign donations/")
### Define paths using relative paths
#path to read original sample
read_path = "data_local/_processed/fec_contrib_master_wdemogs_wzillow_r2Msample.dta"
#path to save final df
save_path = "data_local/_processed/fec_contrib_master_wdemogs_wzillow_r2Msample_jb.dta"
# Define the base paths
base_paths <- c("~/Dropbox/Ztrax/Ztrax_merging/input/20200102/",
"~/Dropbox/Ztrax/Ztrax_merging/input/20210111/",
"~/Dropbox/Ztrax/Ztrax_merging/input/20220400/",
"~/Dropbox/Ztrax/Ztrax_merging/input/ZTRAX_historical/")
# Define the columns to be read
columns_to_read <- c("RowID", "ImportParcelID", "FIPS", "TotalAssessedValue",
"AssessmentYear", "TotalMarketValue", "MarketValueYear")
fips_folders <- unique(unlist(lapply(base_paths, function(base_path) {
list.dirs(base_path, recursive = FALSE, full.names = FALSE)
})))
# Initialize data frames for the final results
all_exact_matches_18 <- data.frame()
all_exact_matches_19 <- data.frame()
all_exact_matches_20 <- data.frame()
# Function to calculate the mode
mode <- function(x) {
u <- unique(x)
tab <- tabulate(match(x, u))
u[tab == max(tab)]
}
file.path(base_paths[1], fips_code[1])
file.path(base_paths[1], fips_folders[1])
fips_folders
# filter data
library(knitr)
library(shiny)
library(ggplot2)
library(png)
library(tidyverse)
library(ggrepel)
library(ggtext)
library(haven)
library(kableExtra)
library(readxl)
library(estimatr)
library(stargazer)
library(fastDummies)
library(sandwich)
compliance <- read_excel("~/Dropbox/Bolivia_Project/social-media-influencers-af/data/06-other/merged_treatment_tweets_vf.xlsx")
View(compliance)
pilot_ke <- compliance %>% filter(batch == "pilot" & country == "KE")
pilot_ke_ext <- compliance %>% filter(batch == "pilot" & country == "KE") %>% distinct(value, .keep_all = TRUE)
pilot_ke_ext <- compliance %>% filter(batch == "pilot" & country == "KE") %>% distinct(handle, .keep_all = TRUE)
pilot_ke_ext <- compliance %>% filter(batch == "pilot" & country == "KE") %>% distinct(handle, .keep_all = TRUE)
pilot_sa_ext <- compliance %>% filter(batch == "pilot" & country == "SA") %>% distinct(handle, .keep_all = TRUE)
pilot_ke_ext <- compliance %>% filter(batch == "pilot" & country == "KE") %>% distinct(handle, .keep_all = TRUE)
pilot_sa_ext <- compliance %>% filter(batch == "pilot" & country == "SA") %>% distinct(handle, .keep_all = TRUE)
b1_ke_ext <- compliance %>% filter(batch == "1" & country == "KE") %>% distinct(handle, .keep_all = TRUE)
b1_sa_ext <- compliance %>% filter(batch == "1" & country == "SA") %>% distinct(handle, .keep_all = TRUE)
b2_ke_ext <- compliance %>% filter(batch == "2" & country == "KE") %>% distinct(handle, .keep_all = TRUE)
b2_sa_ext <- compliance %>% filter(batch == "2" & country == "SA") %>% distinct(handle, .keep_all = TRUE)
nrow(pilot_ke_ext)/10
nrow(pilot_sa_ext)/10
View(pilot_sa_ext)
pilot_ke_ext <- compliance %>% filter(batch == "pilot" & country == "KE") %>% distinct(handle, .keep_all = TRUE)
pilot_sa_ext <- compliance %>% filter(batch == "pilot" & country == "SA") %>% distinct(handle, .keep_all = TRUE)
b1_ke_ext <- compliance %>% filter(batch == "1" & country == "KE") %>% distinct(handle, .keep_all = TRUE)
b1_sa_ext <- compliance %>% filter(batch == "1" & country == "SA") %>% distinct(handle, .keep_all = TRUE)
b2_ke_ext <- compliance %>% filter(batch == "2" & country == "KE") %>% distinct(handle, .keep_all = TRUE)
b2_sa_ext <- compliance %>% filter(batch == "2" & country == "SA") %>% distinct(handle, .keep_all = TRUE)
76/2
5872
58/2
52/2
df_compliance <- tribble(
~country,        ~batch,                 ~compliance,
"Kenya",           "Pilot",                  nrow(pilot_ke_ext)/10,
"South Africa",    "Pilot",                  nrow(pilot_sa_ext)/10,
"Kenya",           "First Batch",            nrow(b1_ke_ext)/38,
"South Africa",    "First Batch",            nrow(b1_sa_ext)/38,
"Kenya",           "Second Batch",           nrow(b2_ke_ext)/29,
"South Africa",    "Second Batch",           nrow(b2_sa_ext)/26
)
View(df_compliance)
pilot_ke_int <- compliance %>% filter(batch == "pilot" & country == "KE")
pilot_sa_int <- compliance %>% filter(batch == "pilot" & country == "SA")
b1_ke_int <- compliance %>% filter(batch == "1" & country == "KE")
b1_sa_int <- compliance %>% filter(batch == "1" & country == "SA")
b2_ke_int <- compliance %>% filter(batch == "2" & country == "KE")
b2_sa_int <- compliance %>% filter(batch == "2" & country == "SA")
2*10
df_compliance_2 <- tribble(
~country,        ~batch,                 ~compliance,
"Kenya",           "Pilot",               nrow(pilot_ke_int)/(10*2),
"South Africa",    "Pilot",               nrow(pilot_sa_int)/(10*2),
"Kenya",           "First Batch",         nrow(b1_ke_int)/(38*2),
"South Africa",    "First Batch",         nrow(b1_sa_int)/(38*2),
"Kenya",           "Second Batch",        nrow(b2_ke_int)/(29*2),
"South Africa",    "Second Batch",        nrow(b2_sa_int)/(26*2)
)
View(df_compliance_2)
df_compliance_2 <- tribble(
~country,        ~batch,                 ~compliance,
"Kenya",           "Pilot",               nrow(pilot_ke_int)/(10*2*8),
"South Africa",    "Pilot",               nrow(pilot_sa_int)/(10*2*8),
"Kenya",           "First Batch",         nrow(b1_ke_int)/(38*2*8),
"South Africa",    "First Batch",         nrow(b1_sa_int)/(38*2*8),
"Kenya",           "Second Batch",        nrow(b2_ke_int)/(29*2*8),
"South Africa",    "Second Batch",        nrow(b2_sa_int)/(26*2*8)
)
pilot_ke_int <- compliance %>% filter(batch == "pilot" & country == "KE")
pilot_sa_int <- compliance %>% filter(batch == "pilot" & country == "SA")
b1_ke_int <- compliance %>% filter(batch == "1" & country == "KE")
b1_sa_int <- compliance %>% filter(batch == "1" & country == "SA")
b2_ke_int <- compliance %>% filter(batch == "2" & country == "KE") %>% distinct(created_at, handle, .keep_all = TRUE)
b2_sa_int <- compliance %>% filter(batch == "2" & country == "SA") %>% distinct(created_at, handle, .keep_all = TRUE)
df_compliance <- tribble(
~country,        ~batch,                 ~compliance,
"Kenya",           "Pilot",                  nrow(pilot_ke_ext)/10,
"South Africa",    "Pilot",                  nrow(pilot_sa_ext)/10,
"Kenya",           "First Batch",            nrow(b1_ke_ext)/38,
"South Africa",    "First Batch",            nrow(b1_sa_ext)/38,
"Kenya",           "Second Batch",           nrow(b2_ke_ext)/29,
"South Africa",    "Second Batch",           nrow(b2_sa_ext)/26
)
df_compliance_2 <- tribble(
~country,        ~batch,                 ~compliance,
"Kenya",           "Pilot",               nrow(pilot_ke_int)/(10*2*8),
"South Africa",    "Pilot",               nrow(pilot_sa_int)/(10*2*8),
"Kenya",           "First Batch",         nrow(b1_ke_int)/(38*2*8),
"South Africa",    "First Batch",         nrow(b1_sa_int)/(38*2*8),
"Kenya",           "Second Batch",        nrow(b2_ke_int)/(29*2*8),
"South Africa",    "Second Batch",        nrow(b2_sa_int)/(26*2*8)
)
df_compliance$batch <- factor(df_compliance$batch, levels = unique(df_compliance$batch))
df_compliance_2$batch <- factor(df_compliance_2$batch, levels = unique(df_compliance_2$batch))
compliance <- read_excel("~/Dropbox/Bolivia_Project/social-media-influencers-af/data/06-other/merged_treatment_tweets_vf.xlsx")
# Separate the data where batch == 2
df_batch_2 <- compliance %>% filter(batch == 2)
# Drop duplicated observations based on 'handle' and 'created_at' for batch == 2
df_batch_2 <- df_batch_2 %>% distinct(handle, created_at, .keep_all = TRUE)
# Combine the deduplicated subset with the rest of the data frame
df_combined <- compliance %>% filter(batch != 2) %>% bind_rows(df_batch_2)
View(df_combined)
View(df_batch_2)
# Separate the data where batch == 2 and week == 'Week 8'
df_batch_week <- compliance %>% filter(batch == 2 & week == 'Week 8')
# Drop duplicated observations based on 'handle' and 'created_at' for batch == 2 and week == 'Week 8'
df_batch_week <- df_batch_week %>% distinct(handle, created_at, .keep_all = TRUE)
# Combine the deduplicated subset with the rest of the data frame
df_combined <- compliance %>% filter(!(batch == 2 & week == 'Week 8')) %>% bind_rows(df_batch_week)
# Separate the data where batch == 2
df_batch_2 <- compliance %>% filter(batch == 2)
# Drop duplicated observations based on 'handle' and 'created_at' for batch == 2
df_batch_2 <- df_batch_2 %>% distinct(handle, created_at, .keep_all = TRUE)
# Combine the deduplicated subset with the rest of the data frame
df_combined <- compliance %>% filter(batch != 2) %>% bind_rows(df_batch_2)
compliance <- read_excel("~/Dropbox/Bolivia_Project/social-media-influencers-af/data/06-other/merged_treatment_tweets_vf.xlsx")
# Separate the data where batch == 2 and week == 'Week 8'
df_batch_week <- compliance %>% filter(batch == 2 & week == 'Week 8')
# Drop duplicated observations based on 'handle' and 'created_at' for batch == 2 and week == 'Week 8'
df_batch_week <- df_batch_week %>% distinct(handle, created_at, .keep_all = TRUE)
# Combine the deduplicated subset with the rest of the data frame
df_combined <- compliance %>% filter(!(batch == 2 & week == 'Week 8')) %>% bind_rows(df_batch_week)
pilot_ke_ext <- df_combined %>% filter(batch == "pilot" & country == "KE") %>% distinct(handle, .keep_all = TRUE)
pilot_sa_ext <- df_combined %>% filter(batch == "pilot" & country == "SA") %>% distinct(handle, .keep_all = TRUE)
b1_ke_ext <- df_combined %>% filter(batch == "1" & country == "KE") %>% distinct(handle, .keep_all = TRUE)
b1_sa_ext <- df_combined %>% filter(batch == "1" & country == "SA") %>% distinct(handle, .keep_all = TRUE)
b2_ke_ext <- df_combined %>% filter(batch == "2" & country == "KE") %>% distinct(handle, .keep_all = TRUE)
b2_sa_ext <- df_combined %>% filter(batch == "2" & country == "SA") %>% distinct(handle, .keep_all = TRUE)
pilot_ke_int <- df_combined %>% filter(batch == "pilot" & country == "KE")
pilot_sa_int <- df_combined %>% filter(batch == "pilot" & country == "SA")
b1_ke_int <- df_combined %>% filter(batch == "1" & country == "KE")
b1_sa_int <- df_combined %>% filter(batch == "1" & country == "SA")
b2_ke_int <- df_combined %>% filter(batch == "2" & country == "KE") %>% distinct(created_at, handle, .keep_all = TRUE)
b2_sa_int <- df_combined %>% filter(batch == "2" & country == "SA") %>% distinct(created_at, handle, .keep_all = TRUE)
df_compliance <- tribble(
~country,        ~batch,                 ~compliance,
"Kenya",           "Pilot",                  nrow(pilot_ke_ext)/10,
"South Africa",    "Pilot",                  nrow(pilot_sa_ext)/10,
"Kenya",           "First Batch",            nrow(b1_ke_ext)/38,
"South Africa",    "First Batch",            nrow(b1_sa_ext)/38,
"Kenya",           "Second Batch",           nrow(b2_ke_ext)/29,
"South Africa",    "Second Batch",           nrow(b2_sa_ext)/26
)
df_compliance_2 <- tribble(
~country,        ~batch,                 ~compliance,
"Kenya",           "Pilot",               nrow(pilot_ke_int)/(10*2*8),
"South Africa",    "Pilot",               nrow(pilot_sa_int)/(10*2*8),
"Kenya",           "First Batch",         nrow(b1_ke_int)/(38*2*8),
"South Africa",    "First Batch",         nrow(b1_sa_int)/(38*2*8),
"Kenya",           "Second Batch",        nrow(b2_ke_int)/(29*2*8),
"South Africa",    "Second Batch",        nrow(b2_sa_int)/(26*2*8)
)
write_excel(df_combined, "~/Dropbox/Bolivia_Project/social-media-influencers-af/data/06-other/merged_treatment_tweets_final.xlsx")
writexl::write_xlsx(df_combined, "~/Dropbox/Bolivia_Project/social-media-influencers-af/data/06-other/merged_treatment_tweets_final.xlsx")
df_compliance$batch <- factor(df_compliance$batch, levels = unique(df_compliance$batch))
df_compliance_2$batch <- factor(df_compliance_2$batch, levels = unique(df_compliance_2$batch))
#barplot
plt2 <- ggplot(df_compliance, aes(x = batch, y = compliance ,
fill = country)) +
geom_bar(position = position_dodge(preserve = 'single'), stat='identity') +
#make axis start at zero, add % and nice breaks
scale_y_continuous(labels = scales::percent,
expand = expansion(mult = c(0, .05)),
breaks=scales::pretty_breaks(n = 10)) +
#set manually colors
scale_fill_manual(values = c("grey","slategrey")) +
#add theme
theme_classic() +
#add label in y axis
labs(y = "Compliance") +
#styling via various theme options
theme(panel.spacing.x = unit(0, "pt"),
axis.title.x = element_blank(),
strip.placement = "outside",
strip.background.x = element_blank(),
axis.line.x = element_line(size = .1),
panel.grid.major.y = element_line(linetype = "dotted"),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
axis.text=element_text(size=15),
plot.caption = element_text(size = 13),
axis.title=element_text(size=18),
strip.text.x = element_text(size = 14, face = 'bold'),
legend.text = element_text(size = 14),
legend.title = element_blank())
plt2
ggsave("../plots/compliance_v2.png")
setwd("~/Dropbox/Bolivia_Project/social-media-influencers-af/gates_report/code")
#barplot
plt2 <- ggplot(df_compliance, aes(x = batch, y = compliance ,
fill = country)) +
geom_bar(position = position_dodge(preserve = 'single'), stat='identity') +
#make axis start at zero, add % and nice breaks
scale_y_continuous(labels = scales::percent,
expand = expansion(mult = c(0, .05)),
breaks=scales::pretty_breaks(n = 10)) +
#set manually colors
scale_fill_manual(values = c("grey","slategrey")) +
#add theme
theme_classic() +
#add label in y axis
labs(y = "Compliance") +
#styling via various theme options
theme(panel.spacing.x = unit(0, "pt"),
axis.title.x = element_blank(),
strip.placement = "outside",
strip.background.x = element_blank(),
axis.line.x = element_line(size = .1),
panel.grid.major.y = element_line(linetype = "dotted"),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
axis.text=element_text(size=15),
plot.caption = element_text(size = 13),
axis.title=element_text(size=18),
strip.text.x = element_text(size = 14, face = 'bold'),
legend.text = element_text(size = 14),
legend.title = element_blank())
plt2
ggsave("../plots/compliance_v2.png")
caption = 'Percentage of influencers who posted at least one piece of campaign-related content.'
#barplot
plt3 <- ggplot(df_compliance_2, aes(x = batch, y = compliance ,
fill = country)) +
geom_bar(position = position_dodge(preserve = 'single'), stat='identity') +
#make axis start at zero, add % and nice breaks
scale_y_continuous(labels = scales::percent,
expand = expansion(mult = c(0, .05)),
breaks=scales::pretty_breaks(n = 10)) +
#set manually colors
scale_fill_manual(values = c("grey","slategrey")) +
#add theme
theme_classic() +
#add label in y axis
labs(y = "Compliance") +
#styling via various theme options
theme(panel.spacing.x = unit(0, "pt"),
axis.title.x = element_blank(),
strip.placement = "outside",
strip.background.x = element_blank(),
axis.line.x = element_line(size = .1),
panel.grid.major.y = element_line(linetype = "dotted"),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
axis.text=element_text(size=15),
plot.caption = element_text(size = 13),
axis.title=element_text(size=18),
strip.text.x = element_text(size = 14, face = 'bold'),
legend.text = element_text(size = 14),
legend.title = element_blank())
plt3
ggsave("../plots/compliance_tweets_v2.png")
caption = 'Percentage of actual campaign-related// tweets posted compared to the total number of campaign-related tweets required.'
nrow(df_combined %>% filter(country == "KE") %>% distinct(handle, .keep_all = TRUE))/(10+38+29)
ggsave("../plots/compliance_v2.png", plot = plt2, width = 10, height = 6, dpi = 300)
ggsave("../plots/compliance_tweets_v2.png", plot = plt3, width = 10, height = 6, dpi = 300)
nrow(df_combined %>% filter(country == "KE") %>% distinct(handle, .keep_all = TRUE))/(10+38+29)
nrow(df_combined %>% filter(country == "SA") %>% distinct(handle, .keep_all = TRUE))/(10+38+26)
round(nrow(df_combined %>% filter(country == "KE") %>% distinct(handle, .keep_all = TRUE))/(10+38+29)*100)
round(nrow(df_combined %>% filter(country == "SA") %>% distinct(handle, .keep_all = TRUE))/(10+38+26)*10)
round(nrow(df_combined %>% filter(country == "SA") %>% distinct(handle, .keep_all = TRUE))/(10+38+26)*100)
View(df_compliance)
pilot_sa_ext <- df_combined %>% filter(batch == "pilot" & country == "SA") %>% distinct(handle, .keep_all = TRUE)
pilot_sa_int <- df_combined %>% filter(batch == "pilot" & country == "SA")
10*2*8
setwd("~/Dropbox/Bolivia_Project/social-media-influencers-af/code/04-analysis")
library('fastDummies')
library(ggplot2)
library(ggrepel)
library(readxl)
library(tidyverse)
library(magrittr)
library(lubridate)
library(gridExtra)
library("purrr")
src_path <- c("../../src/utils/")
source_files <- list(
"funcs.R",
"constants_balance2.R"
)
map(paste0(src_path, source_files), source)
ipak(packages)
library(scales)
ads <- read_excel("../../data/03-experiment/ads/0-analytics/2023-03-01-to-2023-05-19-agg.xlsx")
ads_p <- read_excel("../../../social-media-influencers-africa/data/03-experiment/ads/0-analytics/2022-12-01-to-2023-01-31-agg.xlsx")
ads_p$Retweets <- as.numeric(as.character(ads_p$Retweets))
ads$Retweets <- as.numeric(as.character(ads$Retweets))
ads_2$Retweets <- as.numeric(as.character(ads_2$Retweets))
ads_p <- ads_p %>%
mutate(Retweets = replace_na(na_if(Retweets, NA), 0))
ads <- read_excel("../../data/03-experiment/ads/0-analytics/2023-03-01-to-2023-05-19-agg.xlsx")
ads_2 <- read_excel("../../data/03-experiment/ads/0-analytics/2023-04-01-to-2023-07-02-agg_b2.xlsx")
ads_p <- read_excel("../../../social-media-influencers-africa/data/03-experiment/ads/0-analytics/2022-12-01-to-2023-01-31-agg.xlsx")
ads <- read_excel("../../data/03-experiment/ads/0-analytics/2023-03-01-to-2023-05-19-agg.xlsx")
ads <- read_excel("../../data/03-experiment/ads/0-analytics/2023-03-01-to-2023-05-19-agg.xlsx")
ads_2 <- read_excel("../../data/03-experiment/ads/0-analytics/2023-04-01-to-2023-07-02-agg_b2.xlsx")
ads_p <- read_excel("../../../social-media-influencers-africa/data/03-experiment/ads/0-analytics/2022-12-01-to-2023-01-31-agg.xlsx")
ads_p$Retweets <- as.numeric(as.character(ads_p$Retweets))
ads$Retweets <- as.numeric(as.character(ads$Retweets))
ads_2$Retweets <- as.numeric(as.character(ads_2$Retweets))
ads_p <- ads_p %>%
mutate(Retweets = replace_na(na_if(Retweets, NA), 0))
ads_2 <- ads_2 %>%
mutate(Retweets = replace_na(na_if(Retweets, NA), 0))
# Get the common column names
common_cols <- Reduce(intersect, list(names(ads_p), names(ads), names(ads_2)))
# Subset the data frames to keep only the common columns
ads_subset_p <- ads_p[, common_cols]
ads_subset <- ads[, common_cols]
ads_subset_2<- ads_2[, common_cols]
# Combine the data frames using rbind
ads_pooled <- rbind(ads_subset_p, ads_subset, ads_subset_2)
View(ads_pooled)
#get means
ads_means <- ads_pooled %>% group_by(Country, Week, Ad) %>%
summarise(across(everything(), mean),
.groups = 'drop')
View(ads_means)
setwd("~/Dropbox/Bolivia_Project/social-media-influencers-af/code/04-analysis")
